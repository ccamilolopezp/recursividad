{
	"info": {
		"_postman_id": "df3ab54d-fe5a-4b58-b62c-43ba6963d55e",
		"name": "RickAndMortyAPI",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "43954689",
		"_collection_link": "https://camilolopez-6330304.postman.co/workspace/Camilo-Lopez's-Workspace~198daf6d-3c42-4bd6-8d18-883af23ca17b/collection/43954689-df3ab54d-fe5a-4b58-b62c-43ba6963d55e?action=share&source=collection_link&creator=43954689"
	},
	"item": [
		{
			"name": "Get all characters",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Results is an array\", () => {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.results).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"pm.test(\"Every character has id, name and status\", () => {\r",
							"    const jsonData = pm.response.json();\r",
							"    jsonData.results.forEach(char => {\r",
							"        pm.expect(char).to.have.property(\"id\");\r",
							"        pm.expect(char).to.have.property(\"name\");\r",
							"        pm.expect(char).to.have.property(\"status\");\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://rickandmortyapi.com/api/character",
					"protocol": "https",
					"host": [
						"rickandmortyapi",
						"com"
					],
					"path": [
						"api",
						"character"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get character by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Character has mandatory fields\", () => {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"id\");\r",
							"    pm.expect(jsonData).to.have.property(\"name\");\r",
							"    pm.expect(jsonData).to.have.property(\"status\");\r",
							"    pm.expect(jsonData).to.have.property(\"species\");\r",
							"});\r",
							"\r",
							"pm.test(\"Character matches the requested id\", () => {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id).to.eql(parseInt(pm.variables.get(\"id\")));\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://rickandmortyapi.com/api/character/{{id}}",
					"protocol": "https",
					"host": [
						"rickandmortyapi",
						"com"
					],
					"path": [
						"api",
						"character",
						"{{id}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "",
			"type": "default"
		}
	]
}